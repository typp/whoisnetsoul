#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import socket
import sys
import re
import subprocess

class chalk_module (object):
    def __init__ (self):
        self.ansiesc = re.compile(r'\x1b[^m]*m')
    def chalk (self, string, code, bold):
        attr = []
        if bold: attr.append('1')
        attr.append(code)
        return '\x1b[%sm%s\x1b[0m' % (';'.join(attr), string)
    def strip (self, string):
        return self.ansiesc.sub('', string)
    def black   (self, string): return self.chalk(string, '30', True)
    def red     (self, string): return self.chalk(string, '31', False)
    def green   (self, string): return self.chalk(string, '32', False)
    def yellow  (self, string): return self.chalk(string, '33', False)
    def blue    (self, string): return self.chalk(string, '34', False)
    def magenta (self, string): return self.chalk(string, '35', False)
    def cyan    (self, string): return self.chalk(string, '36', False)
    def white   (self, string): return self.chalk(string, '37', False)

chalk = chalk_module()

def sttysize ():
    rows = 0
    columns = 0
    try:
        rows, columns = subprocess.check_output(['stty', 'size']).split()
        rows = int(rows)
        columns = int(columns)
    except Exception:
        pass
    if not columns:
        columns = 80
    if not rows:
        rows = 25
    return rows, columns

def clamp (n, minimum, maximum):
    return min(max(n, minimum), maximum)

def ljust (string, width):
    shift = len(string) - len(chalk.strip(string))
    return str.ljust(string, max(width + shift, 0))

def tableprint (table, width):
    innerwidth = len(max([chalk.strip(each) for each in table], key=len))
    currentwidth = 0
    line = ''
    for element in table:
        line += ljust(element, innerwidth)
        currentwidth += innerwidth
        if currentwidth + innerwidth + 1 >= width:
            print(line)
            line = ''
            currentwidth = 0
        else:
            line += ' '
            currentwidth += 1
    if line:
        print(line)

class whoisnetsoul (object):

    class response:
        class valuestats:
            def __init__ (self):
                self.logged = 0
                self.active = 0
                self.server = 0
        class typestats:
            def __init__ (self, parent):
                self.full = parent.valuestats()
                self.query = parent.valuestats()
        def __init__ (self):
            self.peers = []
            self.stats = self.typestats(self)

    def __init__ (self):
        self.SCHOOLIPS = [
            [10],
            [172, 16],
            [172, 17],
            [172, 18],
            [172, 19],
            [172, 20],
            [172, 21],
            [172, 22],
            [163, 5]
        ]
        self.filtering = False
        self.ns_server = 'ns-server.epita.fr'
        self.ns_port = 4242
        self.query = []
        self.sock = None

    def usage (self):
        print('usage: %s [user_list_path]' % (self.name,))

    # socket: unsigned int, representant le numÃ©ro de la socket du client
    #         qui vient d'envoyer le message ;
    # user host: adresse ip du client ;
    # login timestamp: heure de connexion du client sur netsoul
    # last status change timestamp: heure du dernier changement d'etat ;
    # trust level low/high: correspondent au 1/3 et 3/1 pour les machines
    #                       dans le PIE et hors du PIE ;
    # workstation type: type de la machine ;
    # location: champs location de l'utilisateur (en url encoded) ;
    # group: groupe de l'utilisateur ;
    # status: status de l'utilisateur ;
    # user date: champs userdata de l'utilisateur (en url encoded).
    def parse_peer_info (self, line):
        line = line.split()
        peer_info = dict()
        peer_info['socket']                       = line[0]
        peer_info['login']                        = line[1]
        peer_info['user_host']                    = line[2]
        peer_info['login_timestamp']              = line[3]
        peer_info['last_status_change_timestamp'] = line[4]
        peer_info['trust_level_low']              = line[5]
        peer_info['trust_level_high']             = line[6]
        peer_info['workstation_type']             = line[7]
        peer_info['location']                     = line[8]
        peer_info['group']                        = line[9]
        peer_info['status']                       = line[10].split(':')[0]
        peer_info['user_data']                    = line[11]
        return peer_info

    def is_peer_at_school (self, ip):
        ip = [int(x) for x in ip.split('.')]
        for ref in self.SCHOOLIPS:
            if ref == ip[:len(ref)]:
                return True
        return False

    def arguments (self, args):
        self.query = []
        if len(args) > 0:
            if args[0] in ['-h', '--help']:
                self.usage()
            else:
                self.query = [line.strip() for line in open(sys.argv[1])]
                if len(self.query) > 0:
                    self.filtering = True

    def connect (self):
        print('Connecting to %s:%i ...' % (self.ns_server, self.ns_port))
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((self.ns_server, self.ns_port))

    def dummy_recv (self):
        dummy = self.sock.recv(1024)

    def list_users_filter (self, res, peer_info):
        if peer_info['login'] != None:
            res.stats.full.logged += 1
            if peer_info['status'] == 'actif':
                res.stats.full.active += 1
            elif peer_info['status'] == 'server':
                res.stats.full.server += 1
            if not self.filtering or peer_info['login'] in self.query:
                res.peers.append(peer_info)
                res.stats.query.logged += 1
        return res

    def list_users (self):
        print('Retreiving netsoul user list ...')
        self.dummy_recv()
        self.sock.send(bytes('list_users\n', 'utf-8'))
        res = self.response()
        log = self.sock.makefile()
        for line in log:
            if not line or line == "rep 002 -- cmd end\n":
                break
            peer_info = self.parse_peer_info(line)
            res = self.list_users_filter(res, peer_info)
        return res

    def print_header (self, res):
        print('[%s :: %s/%s logged, %s active, %s servers]' % (
            chalk.cyan('Netsoul'),
            chalk.green(str(res.stats.query.logged)),
            chalk.green(str(res.stats.full.logged)),
            chalk.green(str(res.stats.full.active)),
            chalk.green(str(res.stats.full.server)),
        ))

    def post_filter (self, peer_info):
        login = peer_info['login']
        at_school = self.is_peer_at_school(peer_info['user_host'])
        if peer_info['status'] in ['actif', 'connection']:
            if at_school:
                login = chalk.green(login)
            else:
                login = chalk.red(login)
        elif peer_info['status'] == 'server':
            if at_school:
                login = chalk.blue(login)
            else:
                login = chalk.magenta(login)
        elif peer_info['status'] in ['idle', 'away', 'lock']:
            if at_school:
                login = chalk.white(login)
            else:
                login = chalk.black(login)
        else:
            login = chalk_yellow(login + '(*' + peer_info['status'] + ')')
        return login

    def list (self, args):
        self.arguments(args)
        self.connect()
        res = self.list_users()
        self.print_header(res)
        output = []
        for peer_info in res.peers:
            if peer_info['login'] is not None:
                output.append(self.post_filter(peer_info))
        rows, columns = sttysize()
        tableprint(output, columns)

if __name__ == '__main__':
    name = os.path.basename(sys.argv[0])
    instance = whoisnetsoul()
    instance.list(sys.argv[1:])

